module selfchecking_tb();

    // localparam period = 100;
    // replace 25 with period/2 and 50 with period
    
    reg clk, rst, w; // inputs
    wire z;          // outputs
    
    module_name DUT(clk, rst, w, z);
    
    reg [0:15] pattern = 16'b0101001101101011;
    
    initial begin
        clk = 0;                // maybe 1
        forever #25 clk = ~clk; // forever #(period / 2)
    end
    
    integer i;
    initial begin
        w = 0; rst = 1;
        #25
        rst = 0;
        for (i = 0; i <= 15; i = i + 1) begin
            #50 w = pattern[i];
        end
    end
    
endmodule

/*
initial begin{x, y, cin} = 3’b000;#100if(s == 0 && cout == 0) $display("Test passed for 000");{x, y, cin} = 3’b001;#100if(s == 1 && cout == 0) $display("Test passed for 001");{x, y, cin} = 3’b010;#100if(s == 1 && cout == 0) $display("Test passed for 010");…………{x, y, cin} = 3’b111;#100if(s == 1 && cout == 1) $display("Test passed for 111");end
*/

/*
// Golden Modelassign {ref_cout, ref_s} = x + y + cin;// The Checkerassign err = (ref_s != s) || (ref_cout != cout);

// Stimuli Generatorinteger i;initial beginfor ( i = 0; i < 8; i = i + 1 ) begin{x, y, cin} = i; #10// every 10 ns set x, y, cin to the binary rep. of iif (err == 1)$display("Input combination %d failed.", i);endend

/*